@model BHMS.Models.ProdSize

@{
    ViewBag.Title = "Size Range";
    ViewBag.SubTitle = "Edit";
}

<div class="panel panel-primary panel-bordered">
    <div class="panel-heading">
        <h5 class="panel-title">Size Range Information</h5>
    </div>
    <div class="panel-body">

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.Id)

                <div class="form-group form-group-xs">                    
                    <label class="control-label col-md-2">Buyer</label>
                    <div class="col-md-10">
                        @Html.DropDownList("BuyerInfoId", null, "", htmlAttributes: new { @class = "form-control select2" })
                        @*@Html.ValidationMessageFor(model => model.ProdCatTypeId, "", new { @class = "text-danger" })*@
                    </div>
                </div>

                <div class="form-group form-group-xs">
                    @Html.Label("Brand", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("BrandId", null, "", htmlAttributes: new { @class = "form-control select2 input-xs" })
                    </div>
                </div>

                <div class="form-group form-group-xs">
                    @Html.LabelFor(model => model.ProdDepartmentId, "Department", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("ProdDepartmentId", null,"", htmlAttributes: new { @class = "form-control select2" })
                        @Html.ValidationMessageFor(model => model.ProdDepartmentId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group form-group-xs">
                    @Html.LabelFor(model => model.SizeRange, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.SizeRange, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SizeRange, "", new { @class = "text-danger" })
                    </div>
                </div>

                @*<div class="form-group">
                    @Html.LabelFor(model => model.IsAuth, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.HiddenFor(model => model.IsAuth)
                            @Html.ValidationMessageFor(model => model.IsAuth, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.OpBy, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.HiddenFor(model => model.OpBy, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.OpBy, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.OpOn, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.OpOn, new { htmlAttributes = new { @class = "form-control datepicker" } })
                        @Html.ValidationMessageFor(model => model.OpOn, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.AuthBy, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.AuthBy, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.AuthBy, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.AuthOn, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.AuthOn, new { htmlAttributes = new { @class = "form-control datepicker" } })
                        @Html.ValidationMessageFor(model => model.AuthOn, "", new { @class = "text-danger" })
                    </div>
                </div>*@

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Save" class="btn btn-success" />
                        @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-default" })
                    </div>
                </div>
            </div>
        }
        </div>
    </div>


@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">

    $(document).ready(function () {
        $(".select2").select2();
    });


    //$('#ProdCat').change(function () {
    //    var selectedValue = $("#ProdCat option:selected").val();
    //    $("#ProdCatTypeId option:selected").prop("selected", false);
    //    if (selectedValue.length == 0) {
    //        $('#ProdCatTypeId').empty();
    //        return;
    //    }

    //    $.ajax({
    //        type: "post",
    //        url: "/ProdCatType/GetNames",
    //        data: { Id: selectedValue },
    //        datatype: "json",
    //        traditional: true,
    //        success: function (data) {
    //            $('#ProdCatTypeId').empty();
    //            $('#ProdCatTypeId').append('<option value=""></option>');
    //            $.each(data, function (index, item) {
    //                $('#ProdCatTypeId').append($('<option></option>').val(item.Id).text(item.Name));
    //            })
    //        },
    //        error: function (jqXHR, textStatus, errorThrown) {
    //            alert('Error: ' + textStatus + ' - ' + errorThrown);
    //        }
    //    });
    //});


    $('#BuyerInfoId').change(function () {
        var selectedValue = $("#BuyerInfoId option:selected").val();
        var brandSelect = $('#BrandId');

        $("#ProdDepartment option:selected").prop("selected", false);
        if (selectedValue.length == 0) {
            brandSelect.empty();
            $('#ProdDepartmentId').empty();
            return;
        }
        else {
            $.ajax({
                type: "post",
                url: "/Brand/GetNames",
                data: { Id: selectedValue },
                datatype: "json",
                traditional: true,
                success: function (data) {

                    $('#ProdDepartmentId').empty();

                    brandSelect.empty();
                    brandSelect.append('<option value=""></option>');
                    $.each(data, function (index, item) {
                        brandSelect.append($('<option></option>').val(item.Id).text(item.Name));
                    })
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert('Error: ' + textStatus + ' - ' + errorThrown);
                }
            });
        }

        //$.ajax({
        //    type: "post",
        //    url: "/ProdDepartment/GetNames",
        //    data: { Id: selectedValue },
        //    datatype: "json",
        //    traditional: true,
        //    success: function (data) {
        //        $('#ProdDepartmentId').empty();
        //        $('#ProdDepartmentId').append('<option value=""></option>');
        //        $.each(data, function (index, item) {
        //            $('#ProdDepartmentId').append($('<option></option>').val(item.Id).text(item.Name));
        //        })                
        //    },
        //    error: function (jqXHR, textStatus, errorThrown) {
        //        alert('Error: ' + textStatus + ' - ' + errorThrown);
        //    }
        //});

    });


    $('#BrandId').change(function () {
        var selectedValue = $(this).val();
        var stateSelect = $('#ProdDepartmentId');

        if (selectedValue.length > 0) {
            $.ajax({
                type: "post",
                url: "/ProdDepartment/GetNames",
                data: { Id: selectedValue },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    stateSelect.empty();
                    stateSelect.append('<option value=""></option>');
                    $.each(data, function (index, item) {
                        stateSelect.append($('<option></option>').val(item.Id).text(item.Name));
                    })
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert('Error: ' + textStatus + ' - ' + errorThrown);
                }
            });
        }
        else {
            stateSelect.empty();
            return;
        }

    });

    </script>

}
